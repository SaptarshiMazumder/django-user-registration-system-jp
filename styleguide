Style Guide

English follows Japanese

スタイルガイド

このドキュメントでは、プロジェクト全体の一貫性と可読性を高めるためのスタイルガイドラインを概説します。

全般

フォルダ構造

プロジェクトのフォルダ構造は、次のように編成されています。

- `tg_assignment/`: メインのDjangoプロジェクトディレクトリ。
  - `users/`: ユーザー管理アプリケーションが含まれています。これには、ユーザー登録に関連するモデル、フォーム、ビュー、およびテンプレートが含まれます（課題1）。
    - `api/v1/auth/`: ユーザー登録用のDjango REST Framework APIが含まれています（課題3）。
  - `frontend/`: Reactフロントエンドコードが含まれています（課題2）。


ファイル名：

- ファイルの内容と目的を明確に示すために、わかりやすい名前を選択してください。

JAVASCRIPT (フロントエンド)

命名規則：

- 変数と関数：camelCaseを使用してください（例：userName、getUserData）。
- コンポーネント：PascalCaseを使用してください（例：UserProfile、LoginForm）。

コメント：

- コードの複雑な部分や不明確な部分を説明するために、コメントを追加してください。

状態管理：

- コンポーネント固有のデータを管理するには、useStateを使用してください。

フォーム：

- フォームフィールドには、明確でわかりやすい名前を使用してください（例：email（メールアドレス））。
- データの整合性を確保するために検証を実装し、適切なエラーメッセージを表示してください。
- `touched`状態を使用して、フィールドがより正確な検証のためにアクセスされたかどうかを追跡します。

データフェッチ：

- コンポーネントのマウント時にAPIからデータをロードするには、useEffectを使用します。

PYTHON (バックエンド - DJANGO REST FRAMEWORK)

命名規則：

- 変数と関数：snake_caseを使用してください（例：user_id、save_user）。
- クラス：PascalCaseを使用してください（例：UserSerializer、UserRegistrationAPIView）。

コメント：

- クラスと関数の目的と機能を説明するには、ドキュメント文字列を使用してください。

シリアライザー：

- シリアライザーは、データのシリアル化とデシリアル化を処理するために使用されます。
- Metaクラス内でフィールドを定義します。
- データの整合性を確保するためにバリデーターを実装します。

ビュー：

- APIビューは、受信APIリクエストを処理します。
- さまざまなHTTPメソッドを処理するには、getメソッドとpostメソッドを使用します。
- リクエストデータを検証するには、シリアライザーを利用します。

フォーム：

- Djangoフォームは、ユーザー入力を処理するために使用されます。
- 適切なラベルとバリデーターを使用してフィールドを定義します。
- カスタム検証ロジックには、cleanメソッドを使用します。

テンプレート：

- HTMLテンプレートは、一貫したフォーマットと命名規則に従う必要があります。

DJANGOのガイドライン

設定：

- プロジェクト全体の設定は、tg_assignment/settings.pyに保存します。

URL：

- URLパターンは、tg_assignment/urls.pyおよびアプリ固有のurls.pyファイルで定義します。

モデル：

- データモデルはmodels.pyで定義されます。

ビュー：

- ビューはリクエストとレスポンスを処理します。

テンプレート：

- HTMLテンプレートはtemplates/にあります。

フォーム：

- ユーザー入力と検証には、Djangoフォームを使用します。

シリアライザー：

- APIデータ処理には、シリアライザーを使用します。

コードのフォーマット

- プロジェクト全体で一貫したコードフォーマットを維持します。
- コードフォーマッター（JavaScriptの場合はPrettier、Pythonの場合はBlackなど）を使用して、コードを自動的にフォーマットします。
- プロジェクトのインデントと行の長さの設定を使用するようにコードフォーマッターを構成します。

エラー処理

- 例外を適切にキャッチして処理するために、適切なエラー処理を実装します。
- 問題の診断と修正に役立つように、エラーをログに記録します。
- ユーザーフレンドリーなエラーメッセージをユーザーに表示します。

このスタイルガイドは、プロジェクト全体で一貫性、可読性、および保守性を促進するための一連のガイドラインを提供します。これらのガイドラインに従うことで、コードベースがクリーンで整理され、理解しやすくなることが保証されます。


--------------------------------------
STYLE GUIDE

This document outlines the style guidelines for this project to ensure consistency and readability.

GENERAL

FOLDER STRUCTURE

The project's folder structure is organized as follows:

- `tg_assignment/`: Main Django project directory.
  - `users/`: Contains the user management application, including models, forms, views, and templates related to user registration (Assignment 1).
    - `api/v1/auth/`: Contains the Django REST Framework API for user registration (Assignment 3).
  - `frontend/`: Contains the React frontend code (Assignment 2).


File Naming:

- Choose descriptive names for files to clearly indicate their contents and purpose.

JAVASCRIPT (FRONTEND)

Naming Conventions:

- Variables and functions: Use camelCase (e.g., userName, getUserData).
- Components: Use PascalCase (e.g., UserProfile, LoginForm).

Comments:

- Add comments to explain complex or unclear code sections.

State Management:

- Utilize useState for managing component-specific data.

Forms:

- Use clear and descriptive names for form fields (e.g., email for email inputs).
- Implement validation to ensure data integrity and display appropriate error messages.
- Use the `touched` state to track whether a field has been visited for more precise validation.

Data Fetching:

- Use useEffect for loading data from APIs when components mount.

PYTHON (BACKEND - DJANGO REST FRAMEWORK)

Naming Conventions:

- Variables and functions: Use snake_case (e.g., user_id, save_user).
- Classes: Use PascalCase (e.g., UserSerializer, UserRegistrationAPIView).

Comments:

- Use docstrings to explain the purpose and functionality of classes and functions.

Serializers:

- Serializers are used to handle data serialization and deserialization.
- Define fields within the Meta class.
- Implement validators to ensure data integrity.

Views:

- API views handle incoming API requests.
- Use get and post methods to handle different HTTP methods.
- Utilize serializers to validate request data.

Forms:

- Django forms are used for handling user input.
- Define fields with appropriate labels and validators.
- Use the clean method for custom validation logic.

Templates:

- HTML templates follow consistent formatting and naming conventions.

DJANGO GUIDELINES

Settings:

- Store project-wide settings in tg_assignment/settings.py.

URLs:

- Define URL patterns in tg_assignment/urls.py and app-specific urls.py files.

Models:

- Data models are defined in models.py.

Views:

- Views handle requests and responses.

Templates:

- HTML templates are located in templates/.

Forms:

- Use Django forms for user input and validation.

Serializers:

- Use serializers for API data handling.

CODE FORMATTING

- Maintain consistent code formatting throughout the project.
- Use a code formatter (e.g., Prettier for JavaScript, Black for Python) to automatically format code.
- Configure the code formatter to use the project's indentation and line length settings.

ERROR HANDLING

- Implement proper error handling to catch and handle exceptions gracefully.
- Log errors to help diagnose and fix issues.
- Display user-friendly error messages to the user.

This style guide provides a set of guidelines to promote consistency, readability, and maintainability throughout the project. Adhering to these guidelines will help ensure that the codebase remains clean, organized, and easy to understand.

